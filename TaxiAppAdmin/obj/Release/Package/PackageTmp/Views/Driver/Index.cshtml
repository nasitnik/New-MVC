@using TaxiApp.Common;
@using TaxiAppAdmin.Pages;
@using TaxiAppAdmin.Infrastructure;

@Html.AntiForgeryToken()

@{
    ViewBag.Title = "Manage Drivers";
}
<link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;1,100&display=swap" rel="stylesheet">


<style>
    #map {
        height: 517px;
        width: 779px;
        border: 3px solid black;
    }

    .checkbox2 {
        width: 25px;
        height: 25px;
    }

    thead {
        background: #0069D9;
        color: white;
    }

    .row {
        margin: 0 !important;
    }

    .activ {
        background: linear-gradient(to right, #0069D9, #0069D9);
        color: white;
    }

    .has-error .checkbox, .has-error .checkbox-inline, .has-error .control-label, .has-error .form-control-feedback, .has-error .help-block, .has-error .radio, .has-error .radio-inline, .has-error.checkbox label, .has-error.checkbox-inline label, .has-error.radio label, .has-error.radio-inline label {
        color: #e73d4a
    }

    .has-error .form-control {
        border-color: #e73d4a;
        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075)
    }

        .has-error .form-control:focus {
            border-color: #d71b29;
            -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #f2989f;
            box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #f2989f
        }

    .has-error .input-group-addon {
        color: #e73d4a;
        border-color: #e73d4a;
        background-color: #fbe1e3
    }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        z-index: 99;
        top: 40px;
        left: 0;
        right: 0;
        box-shadow: 0 39px 70px 0 rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
    }

        .autocomplete-items > div {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #ccc;
        }

            .autocomplete-items > div:hover {
                background: #fbfbfb;
            }

    .addDelete {
        color: black !important;
        background: #e9e9e9 !important;
    }

    .hideDelete {
        display: none !important;
    }
</style>

<div class="block-header">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <h2><a id="headingtext" href="javascript:void(0);" class="btn btn-xs btn-link btn-toggle-fullwidth"><i class="fa fa-arrow-left"></i></a>Manage Driver</h2>
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action(Actions.Index,Controllers.Home,new { Area=""})"><i class="icon-home"></i></a></li>
                <li class="breadcrumb-item active">Manage Driver</li>
            </ul>
        </div>
    </div>
</div>

<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="header">
            </div>
            <div class="body">
                <div class="portlet-body table-responsive" id="divUsersTable">
                    <table class="table table-striped table-bordered table-hover" id="UsersTable"></table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fadeIn" id="UsersFilterPopup" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">

            <div class="modal-header">
                <h6 class="title" id="defaultModalLabel">Driver Filters</h6>
            </div>
            <div class="modal-body">
                <div class="row clearfix">

                    <div class="col-sm-12">
                        <label>Status</label>
                        <div class="form-group">
                            <select class="form-control" id="SearchStatus" name="SearchStatus">
                                <option value="2" selected>All</option>
                                <option value="1">Active</option>
                                <option value="0">In-Active</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnSearch" type="button" class="btn btn-primary saveBtn" onclick="SearchReset(false);">Search</button>
                <button type="button" data-dismiss="modal" class="btn btn-secondary closeBtn">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="location" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div id="map"></div>
                <div id="LiveLat" hidden></div>
                <div id="LiveLong" hidden></div>
            </div>
            <div class="modal-footer">
                <button type="button" data-dismiss="modal" class="btn btn-secondary closeBtn2">Close</button>
            </div>
        </div>
    </div>
</div>
<div id="aaaadddd" hidden></div>

@section dashboardscripts{
    <script src="~/Scripts/jquery-ui.min.js"></script>
    <script src="~/Scripts/datatable.js"></script>
    <script src="~/Scripts/datatables.min.js"></script>
    <script src="~/Scripts/datatables.bootstrap.js"></script>
}

@section Scripts {
    <script>
        $(document).ready(() => {
            UsersDataTable.init();
        });

        setInterval(function () {
            getlivelatlongofdriver()
        }, 5000);

             var UsersDataTable = function () {

                let initTable1 = function () {
                    let table = $('#UsersTable');

                    let oTable = table.dataTable({
                        "stateSave": true,
                        "autoWidth": false,
                        "paging": true,
                        // Internationalisation. For more info refer to http://datatables.net/manual/i18n
                        "language": {
                            "aria": {
                                "sortAscending": ": activate to sort column ascending",
                                "sortDescending": ": activate to sort column descending"
                            },
                            "emptyTable": "No data available in table",
                            "info": "Showing _START_ to _END_ of _TOTAL_ entries",
                            "infoEmpty": "No entries found",
                            "infoFiltered": "(filtered1 from _MAX_ total entries)",
                            "lengthMenu": "_MENU_ entries",
                            "search": "Search:",
                            "zeroRecords": "No matching records found"
                        },
                        "pageLength": 10,
                        "processing": true,
                        "serverSide": true,
                        "ajax": {
                            async: true,
                            url: '@Url.Action(Actions.ViewAllData, Controllers.Driver)',
                            type: "post",
                            data: BuildSearchCriteria(),
                    },
                    "columns": [
                        {
                            "title": "Profile", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["ProfilePicture"] == "" || row["ProfilePicture"] == null) {
                                    htmlData = `<img onerror="DefaultImage(this);" class="rounded-circle round-img-table profile-size" src="${'@Configurations.ApiUrl' + row["ProfilePicture"]}">`;
                                } else {
                                    htmlData = `<a href="${'@Configurations.ApiUrl' + row["ProfilePicture"]}" target="_blank"><img onerror="DefaultImage(this);" class="rounded-circle round-img-table profile-size" src="${'@Configurations.ApiUrl' + row["ProfilePicture"]}"></a>`;
                                }
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Driver Details", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<p class="mb-0"><b>Name : </b>${row["FirstName"] + " " + row["LastName"]}</p>`;
                                htmlData += `<p class="mb-0"><b>Email : </b><a class="c-text-primary" href="mailto:${row["Email"]}">${row["Email"]}</a></p>`;
                                htmlData += `<p class="mb-0"><b>Phone : </b>${row["MobileNo"] == "" || row["MobileNo"] == null ? '-' : `<a class="c-text-primary" href="tel:${row["MobileNo"]}">${row["MobileNo"]}</a>` }</p>`;
                                htmlData += `<p class="mb-0"><b>DOB : </b>${row["DOB"] == "" || row["DOB"] == null ? '-' : row["DOB"]}</p>`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Created Date", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData = `${row["CreatedDateStr"] == "" || row["CreatedDateStr"] == null ? '-' : row["CreatedDateStr"]}`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Update Date", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData = `${row["UpdatedDateStr"] == "" || row["UpdatedDateStr"] == null ? '-' : row["UpdatedDateStr"]}`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Last Login", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData = `${row["LastLogin"] == "" || row["LastLogin"] == null ? '-' : row["LastLogin"]}`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Is Active ?", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["IsActive"] == 1) {
                                    htmlData = `<button onclick="InactiveMessage('${btoa(row["Id"])}');" class="badge badge-primary">Active</button>`;
                                } else {
                                    htmlData = `<button onclick="ActiveMessage('${btoa(row["Id"])}');" class="badge badge-danger">In-Active</button>`;
                                }
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                         {
                            "title": "Id Proof", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["IdProof"] == "" || row["IdProof"] == null) {
                                    htmlData = `<img onerror="DefaultImage(this);" class="rounded-circle round-img-table profile-size" src="${'@Configurations.ApiUrl' + row["IdProof"]}">`;
                                } else {
                                    htmlData = `<a href="${'@Configurations.ApiUrl' + row["IdProof"]}" target="_blank"><img onerror="DefaultImage(this);" class="rounded-circle round-img-table profile-size" src="${'@Configurations.ApiUrl' + row["IdProof"]}"></a>`;
                                }

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Is Id Proof Approved?", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["IsIdProofApproved"] == 1) {
                                    htmlData = `<button onclick="IdProofUnApproved('${btoa(row["Id"])}');" class="badge badge-primary">Approved</button>`;
                                } else {
                                    htmlData = `<button onclick="IdProofApproved('${btoa(row["Id"])}');" class="badge badge-danger">Un Approved</button>`;
                                }
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Driving Licence", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["DrivingLicence"] == "" || row["DrivingLicence"] == null) {
                                    htmlData = `<img onerror="DefaultImage(this);" class="rounded-circle round-img-table profile-size" src="${'@Configurations.ApiUrl' + row["DrivingLicence"]}">`;
                                } else {
                                    htmlData = `<a href="${'@Configurations.ApiUrl' + row["DrivingLicence"]}" target="_blank"><img onerror="DefaultImage(this);" class="rounded-circle round-img-table profile-size" src="${'@Configurations.ApiUrl' + row["DrivingLicence"]}"></a>`;
                                }

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Is Driving Licence Approved?", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["IsDrivingLicenceApproved"] == 0) {
                                    htmlData = `<button onclick="DrivingLicenceApproved('${btoa(row["Id"])}');" class="badge badge-danger">Un-Approved</button>`;
                                } else   {
                                    htmlData = `<button onclick="DrivingLicenceUnApproved('${btoa(row["Id"])}');" class="badge badge-primary">Approved</button>`;
                                }
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Action", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["TripCount"] > 0) {
                                    htmlData = `<a href="@Url.Action(Actions.TripDetails,Controllers.Driver)?DriverId=${btoa(row["Id"])}"><button class="badge badge-primary"><span class="mr-2">Total Trips</span>${row["TripCount"]}</button></a>`;
                                }
                                    else {
                                    htmlData = `<button class="badge badge-primary"><span class="mr-2">Total Trips</span>${row["TripCount"]}</button></a>`;
                                }
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Show Location Of Driver?", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<button class="btn btn-sm btn-outline-secondary mr-1" onclick="demo(${row["Id"]})"><i class="fa fa-map-marker"></i></button>`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                    ],
                    // setup buttons extentension: http://datatables.net/extensions/buttons/
                        "buttons": [
                            {
                                text: 'Filters',
                                className: 'them-btn',
                                action: function (e, dt, node, config) {
                                    OpenUsersFiltersPopup();
                                }
                            },
                            {
                                text: 'Reset',
                                className: 'them-reset-btn',
                                action: function () {
                                    SearchReset(true)
                                }
                            }
                            //{ extend: 'excel', className: 'them-btn' }
                        ],

                        // setup responsive extension: http://datatables.net/extensions/responsive/
                        responsive: true,

                        "lengthMenu": [
                            [5, 10, 15, 20, 1000],
                            [5, 10, 15, 20, 1000] // change per page values here
                        ],
                        // set the initial value

                        "dom": "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable

                        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
                        // So when dropdowns used the scrollable div should be removed.
                        //"dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",
                    });
                }

                return {
                    //main function to initiate the module
                    init: function () {
                        if ($.fn.DataTable.isDataTable("#UsersTable")) {
                            $('#UsersTable').dataTable().fnDestroy();
                            $('#divUsersTable').html('<table class="table table-striped" width="100%" id="UsersTable"></table>');
                        }
                        initTable1();
                    }
                };
        }();
        function showmap(LiveLat, LiveLong)
        {
            $("#LiveLat").val(LiveLat);
            $("#LiveLong").val(LiveLong);
            $('#location').modal('show');
            initMap();

        }

        function initMap() {

            const maplocation = { lat: parseFloat($("#LiveLat").val()), lng: parseFloat($("#LiveLong").val()) };

            const map = new google.maps.Map(document.getElementById("map"), {
                zoom: 150,
                center: maplocation,
            });
            const marker = new google.maps.Marker({
                position: maplocation,
                map: map,
            });
        }
        window.initMap = initMap;

        function BuildSearchCriteria() {
            try {
                var param = {};
                param["IsActiveForFilter"] = $("#SearchStatus").val();
                return addRequestVerificationToken(param);
            } catch (e) { }
        }

        function addRequestVerificationToken(data) {
            data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
            return data;
        }

        //Fillter modal open function
        const OpenUsersFiltersPopup = () => {
            $("#UsersFilterPopup").modal("show");
        }

        //Fillter date reset function
        const SearchReset = (isReset = false) => {
            if (isReset == true) {
                $("#SearchStatus").val(2);
            }
            UsersDataTable.init();
            $("#UsersFilterPopup").modal("hide");
        }

        //InactiveMessage swal function
        function InactiveMessage(Id) {
            swal({
                title: "Are you sure ?",
                text: "You will be in-activating the Driver !",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#dc3545",
                confirmButtonText: "Yes, do it !",
                closeOnConfirm: false
            }, function () {
                  ActiveInActive(Id,"inactivate" , 2);
               });
        }

        //ActiveMessage swal function
        function ActiveMessage(Id) {
            swal({
                title: "Are you sure ?",
                text: "You will be activating the Driver !",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#dc3545",
                confirmButtonText: "Yes, do it !",
                closeOnConfirm: false
            }, function () {
                 ActiveInActive(Id,"activate", 1);
               });
        }

        //status ActiveInActive change function
        function ActiveInActive(rui, type, LookUpStatusId) {
            $.ajax({
                type: "POST",
                url: '@Url.Action(Actions.ActiveInActive, Controllers.Driver)',
                data: { ri: rui, lookUpStatusId: LookUpStatusId },
                dataType: 'json',
                success: function (response) {
                    UsersDataTable.init();
                    if (type == "inactivate") {
                        swal("In Activated !", "The Driver has been in-activated successfully.", "success");
                    } else if (type == "activate") {
                        swal("Activated !", "The Driver has been activated successfully.", "success");
                    }
                },
                error: function (error) {
                    if (type == "inactivate") {
                        swal("Error !", "An error occured while in-activating the Driver.", "error");
                    } else if (type == "activate") {
                        swal("Error !", "An error occured while activating the Driver.", "error");
                    }

                }
            });
        }

        function IdProofUnApproved(Id) {
            swal({
                title: "Are you sure ?",
                text: "You will be UnApproved Id Proof Of Driver !",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#dc3545",
                confirmButtonText: "Yes, do it !",
                closeOnConfirm: false
            }, function () {
                  ApprovedUnApprovedIdProof(Id,"unapproved");
               });
        }

        function IdProofApproved(Id) {
            swal({
                title: "Are you sure ?",
                text: "You will be Approved Id Proof Of Driver!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#dc3545",
                confirmButtonText: "Yes, do it !",
                closeOnConfirm: false
            }, function () {
                ApprovedUnApprovedIdProof(Id,"approved");
               });
        }

        function ApprovedUnApprovedIdProof(rui, type) {
            $.ajax({
                type: "POST",
                url: '@Url.Action(Actions.ApprovedUnApprovedIdProof, Controllers.Driver)',
                data: { ri: rui },
                dataType: 'json',
                success: function (response) {
                    UsersDataTable.init();
                    if (type == "unapproved") {
                        swal("In Activated !", "The Driver Id Proof has been un approved successfully.", "success");
                    } else if (type == "approved") {
                        swal("Activated !", "The Driver Id Proof has been approved successfully.", "success");
                    }
                },
                error: function (error) {
                    if (type == "unapproved") {
                        swal("Error !", "An error occured while un-approved id proof  of  Driver.", "error");
                    } else if (type == "approved") {
                        swal("Error !", "An error occured while approved id proof of Driver.", "error");
                    }

                }
            });
        }
        function DrivingLicenceUnApproved(Id) {
            swal({
                title: "Are you sure ?",
                text: "You will be UnApproved Driving Licence Of Driver !",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#dc3545",
                confirmButtonText: "Yes, do it !",
                closeOnConfirm: false
            }, function () {
                ApprovedUnApprovedDrivingLicence(Id,"unapproved");
               });
        }

        function DrivingLicenceApproved(Id) {
            swal({
                title: "Are you sure ?",
                text: "You will be Approved Driving Licence Of Driver !",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#dc3545",
                confirmButtonText: "Yes, do it !",
                closeOnConfirm: false
            }, function () {
                ApprovedUnApprovedDrivingLicence(Id,"approved");
               });
        }

        function ApprovedUnApprovedDrivingLicence(rui, type) {
            $.ajax({
                type: "POST",
                url: '@Url.Action(Actions.ApprovedUnApprovedDrivingLicence, Controllers.Driver)',
                data: { ri: rui },
                dataType: 'json',
                success: function (response) {
                    UsersDataTable.init();
                    if (type == "unapproved") {
                        swal("In Activated !", "The Driving Licence has been un approved successfully.", "success");
                    } else if (type == "approved") {
                        swal("Activated !", "The Driving Licence has been approved successfully.", "success");
                    }
                },
                error: function (error) {
                    if (type == "unapproved") {
                        swal("Error !", "An error occured while un-approved Driving Licence of  Driver.", "error");
                    } else if (type == "approved") {
                        swal("Error !", "An error occured while approved Driving Licence of Driver.", "error");
                    }

                }
            });
        }
        function demo(DriverId) {
            $('#location').modal('show');
            $("#aaaadddd").val(DriverId)
            getlivelatlongofdriver(DriverId)
        }
        function getlivelatlongofdriver(DriverId) {
               $.ajax({
                type: 'POST',
                url: "@Url.Action(Actions.GetLatLongById, Controllers.Driver)",
                async: false,
                   data: ({ Id: $("#aaaadddd").val() }),
                dataType: 'json',
                   success: function (result) {
                       $("#LiveLat").val(result.Item.LiveLat);
                       $("#LiveLong").val(result.Item.LiveLong);
                       initMap();

                },
                error: function (response) {
                    swal("Opps!", "An error occured ! Please try again.", "error");
                }
            });
        }

    </script>
    <script src="~/assets/validation/js/jquery-ui.min.js"></script>
    <script src="~/assets/validation/js/app.min.js"></script>
    <script src="~/assets/validation/js/ui-modals.min.js"></script>
    <script src="~/assets/validation/js/jquery.validate.min.js"></script>
    <script src="~/assets/validation/js/additional-methods.min.js"></script>
    <script src="~/assets/validation/js/toastr.min.js"></script>
    <script src="~/assets/validation/js/ui-toastr.min.js"></script>
    <script src="~/assets/vendor/dropify/js/dropify.min.js"></script>
    <script src="~/assets/vendor/sweetalert/sweetalert.min.js"></script> <!-- SweetAlert Plugin Js -->
    <script src="~/assets/js/pages/forms/dropify.js"></script>
    <script src="~/assets/js/pages/ui/dialogs.js"></script>
}